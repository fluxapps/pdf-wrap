{
    "docs": [
        {
            "location": "/", 
            "text": "Learn PDF Wrap\n\n\nHere you'll find all the documentation and guides to PDF Wrap.\n\n\nInstall PDF Wrap\n\n\nnpm i pdf-wrap\n\n\n\n\nGuides\n\n\nGuides are the perfect match if you're just wanting to create a PDF viewer.\n\n\nTry one of the guides \n\n\nAPI\n\n\nLooking for the API of PDF Wrap?. Here you'll find access to the typedoc APIs.\n\n\nRead the API Documentation \n\n\nReference Documentation\n\n\nLooking for in-depth knowledge of PDF Wrap? Here you'll find access to\nthe reference documentation.\n\n\nRead the Reference Documentation\n\n\nExamples\n\n\nLooking for finished examples? Here you'll find access to examples made with PDF Wrap.\n\n\nCheck out examples", 
            "title": "Home"
        }, 
        {
            "location": "/#learn-pdf-wrap", 
            "text": "Here you'll find all the documentation and guides to PDF Wrap.  Install PDF Wrap  npm i pdf-wrap", 
            "title": "Learn PDF Wrap"
        }, 
        {
            "location": "/#guides", 
            "text": "Guides are the perfect match if you're just wanting to create a PDF viewer.  Try one of the guides", 
            "title": "Guides"
        }, 
        {
            "location": "/#api", 
            "text": "Looking for the API of PDF Wrap?. Here you'll find access to the typedoc APIs.  Read the API Documentation", 
            "title": "API"
        }, 
        {
            "location": "/#reference-documentation", 
            "text": "Looking for in-depth knowledge of PDF Wrap? Here you'll find access to\nthe reference documentation.  Read the Reference Documentation", 
            "title": "Reference Documentation"
        }, 
        {
            "location": "/#examples", 
            "text": "Looking for finished examples? Here you'll find access to examples made with PDF Wrap.  Check out examples", 
            "title": "Examples"
        }, 
        {
            "location": "/guides/basic-viewer/", 
            "text": "Basic PDF viewer", 
            "title": "Basic PDF viewer"
        }, 
        {
            "location": "/guides/basic-viewer/#basic-pdf-viewer", 
            "text": "", 
            "title": "Basic PDF viewer"
        }, 
        {
            "location": "/reference-documentation/", 
            "text": "PDF Wrap Reference Documentation\n\n\nAuthors\n\n\nNicolas M\u00e4rchy\n\n\nVersion 1.0.0\n\n\nCopyright \n 2018 studer + raimann ag, \nCreative Commons Attribution-ShareAlike 4.0 International License\n.\n\n\n\n\nGetting Started\n\n\nAs a note, PDF Wrap does not come with a bundled js file.\n\n\nIf you want a bundled version, you have to bundle it yourself (e.g. with \nwebpack\n).\n\n\nRequirements\n\n\n\n\nLanguage level: ES5\n\n\nModule System: commonjs\n\n\nFileReader\n support\n\n\nBlob\n support\n\n\n\n\nEasy way to check the \nFileReader\n and \nBlob\n support\n\n\nif (window.FileReader \n window.Blob) {\n  // Great success! All the required File APIs are supported.\n} else {\n  alert('The required File APIs are not fully supported in this browser.');\n}\n\n\n\n\nInstalling\n\n\nPDF Wrap can be installed with npm or yarn.\n\n\nYarn Install\n\n\nyarn add pdf-wrap\n\n\n\n\nNPM Install\n\n\nnpm i pdf-wrap\n\n\n\n\nUsing PDF Wrap\n\n\nThis section goes into more detail about how you should use PDF Wrap.\nIt covers topics such as using the api, toolbox and how to provide your storage adapter.\n\n\nSetup HTML\n\n\nIn order to use PDF Wrap properly you have to setup a minimalistic html.\n\n\nStyles\n\n\nIn order to display the PDF properly you should include the following css file.\n\n\n\n\n/assets/css/pdf-wrap.css\n\n\n\n\nHTML container\n\n\nYou have to setup a html container in a specific way.\n\n\ndiv class=\npdf viewport\n\n\n        \ndiv class=\npdf-container\n\n            \ndiv class=\npdfViewer\n/div\n\n        \n/div\n\n\n\n/div\n\n\n\n\n\nWhere the \ndiv\n with the class \npdf viewport\n is your viewport. It is an absolute\npositioned \ndiv\n which will consume the entire area of its relative positioned parent.\nSo either wrap it with another \ndiv\n which is aligned like you want it,\nor override the \npdf viewport\n css styles. Anyway, make sure \npdf viewport\n has\na fix height, otherwise some features of PDF Wrap will not work.\n\n\n\n\nA fix height can also be a percentage based height like \nheight: 100%\n. The viewport container\nshould not be larger than the window, otherwise you'll get doubled scrollbars.\n\n\n\n\nSetup PDF.js\n\n\nBecause PDF Wrap uses \nPDF.js\n under the hood,\nyou have to provide the \npdf.worker.js\n as well as some cMaps.\n\n\nThe \npdf.worker.js\n and the cMaps are delivered in the \nassets\n directory of PDF Wrap.\n\n\nDepending on how you build your project, either copy they to a directory of your choice or provide them\nsomehow as resources.\n\n\nEither way you can set the assets src\n\n\nsetAssetsSrc(\nresources/lib/pdf-wrap/assets\n);\n\n\n\n\nIn this case, we assume, that the \nassets\n directory is copied into the\n\nresources/lib/pdf-wrap\n directory of the built project.\n\n\n\n\nDo NOT set the src url with starting \n./\n or ending \n/\n.\n\n\n\n\nThe default value of the assets src is \nassets\n.\n\n\nSetup Logger\n\n\nPDF Wrap has a default log configuration which logs everything from log level \nWarn\n.\n\n\nYou can override the default config\n\n\nLoggerFactory.configure({\n    logGroups: [\n        {\n            logger: \nch/studerraimann/pdfwrap\n,\n            logLevel: LogLevel.Trace\n        }\n    ]\n});\n\n\n\n\nEach log group object accepts the property \nlogger\n and \nlogLevel\n.\nIt allows you to define different log levels for different directories, files or even classes.\n\n\n\n\nlogger\n defines which directory, file class or function should be used\n\n\nThe string pattern scheme:\n\n\nch/studerraimann/pdfwrap/\ndirectory name\n/\nfile name\n:\nclass or function name\n\n\n\n\nch/studerraimann/pdfwrap\n - must be part of every logger\n\n\n/\ndirectory name\n - can be any directory structure inside the \nsrc\n directory of the PDF Wrap source code\n\n\n/\nfile name\n - can be any file name (without extension) inside the specified directory name\n\n\n:\nclass or function name\n - can be any class or function name inside the specified file name\n\n\n\n\nExample\n\n\n\n\nch/studerrraimann/pdfwrap/pdfjs\n - for everything inside this directory\n\n\nch/studerraimann/pdfwrap/pdfjs/highlight\n - for everything inside this file\n\n\nch/studerraimann/pdfwrap/pdfjs/highlight:TextHighlighting\n - for the class \nTextHighlighting\n of the file \nhighlight\n\n\n\n\n\n\nlogLevel\n defines one of the log level to use on this group\n\n\nIf you are using Typescript you can use the enumerator \nLogLevel\n.\n\n\nIf you are using Javascript you have to use the string value which represents the log level of the enumerator:\n\n\n\n\n\"TRACE\"\n\n\n\"DEBUG\"\n\n\n\"INFO\"\n\n\n\"WARN\"\n\n\n\"ERROR\"\n\n\n\"FATAL\"\n\n\n\n\nUsing the PDF Document Service\n\n\nThe \nPDFDocumentService\n is your entry point to PDF Wrap. It provides a load method\nto load and display your PDF file.\n\n\nCreate an instance of a \nPDFDocumentService\n\n\nconst documentService: PDFDocumentService = new PDFjsDocumentService();\n\n\n\n\n\n\nNote that \nPDFDocumentService\n is the interface and \nPDFjsDocumentService\n is an implementation of it.\n\n\n\n\nYou must provide the PDF as a \nBlob\n\n\ndocumentService.loadWith({\n    container: document.getElementById(\nviewerContainer\n),\n    pdf: pdfData,\n    layerStorage: URI.from(\nfile://my-pdf\n)\n}).then(pdf =\n {\n    // you'll get a PDFDocument instance\n});\n\n\n\n\nOptions:\n\n\n\n\ncontainer: your div with the \npdf-container\n class.\n\n\npdf: a \nBlob\n representing your PDF file.    \n\n\nlayerStorage: an \nURI\n to use for the storage adapter\n\n\n\n\nLearn more about the \nStorageAdapter\n\n\nLayerStorage Example\n\n\nWe assume\n\n\n\n\nthe \nlayerStorage\n is \"mem://my-pdf\"\n\n\nthe registered storage adapter scheme is \"mem://\"\n\n\n\n\n// load the document\ndocumentService.loadWith({\n    container: document.getElementById(\nviewerContainer\n),\n    pdf: \nassets/resources/my-pdf.pdf\n,\n    layerStorage: URI.from(\nmem://my-pdf\n)\n}).then(pdf =\n {\n    // you'll get a PDFDocument instance\n});\n\n// the storage adapter will get the full URI\nexport class MyStorageAdapter implements StorageAdapter {\n\n    register(): URI {\n        return URI.from(\nmem://\n); // we only provide the same scheme\n    }\n\n    start(uri: URI, events: PageEventCollection): void {\n        // uri is mem://my-pdf\n    }\n\n    loadPage(uri: URI, pageNumber: number): Promise\nPageOverlay\n {\n        // uri is mem://my-pdf\n    }\n}\n\n\n\n\nIt is important to know, that for the \nregister\n method, only the URI scheme is considered.\nWhere in the \nstart\n and \nloadPage\n method, the full URI used by the \nloadWith\n method is provided.\nOtherwise, you would not be able to store different PDFs with the same Adapter.\n\n\nUsing the toolbox\n\n\nOnce you have loaded the PDF, you can access its toolbox.\n\n\nThe toolbox contains the following tools:\n\n\n\n\nFreehand - to draw with the mouse on a PDF page\n\n\nEraser - to remove drawings made with the Freehand tool\n\n\n\n\npdf.toolbox.freehand; // get the freehand tool instance\npdf.toolbox.eraser; // get the eraser tool instance\n\n\n\n\nAll tools can be activated, deactivated or toggled\n\n\npdf.toolbox.freehand.activate();\npdf.toolbox.freehand.deactivate();\npdf.toolbox.freehand.toggle();\n\n\n\n\nAll tools provide the current state through a property\n\n\nconst isFreehandActive: boolean = pdf.toolbox.freehand.isActive;\n\n\n\n\nAll tools provide an \nObservable\n which emits the new state in case of a state change\n\n\npdf.toolbox.freehand.stateChange\n    .subscribe(state =\n {\n        if (state.isActive) {\n            ...\n        } else {\n            ...\n        }\n    })\n\n\n\n\nFreehand\n\n\nLimitations:\n\n\n\n\nThe Freehand tool can \nnot\n draw over multiple PDF pages at once\n\n\nThe Freehand tool does \nnot\n work with touchscreen\n\n\n\n\nThe Freehand tool as additional setters:\n\n\n\n\nsetColor\n - accepts a \nColor\n instance and defines the color of the stroke\n\n\nsetStrokeWidth\n - accepts a number in px and defines the width of the stroke\n\n\n\n\nThese setters can be chained\n\n\npdf.toolbox.freehand\n    .setColor(colorFromHex(\n#000\n))\n    .setStrokeWidth(2);\n\n\n\n\nLearn more about colors: \nUsing colors\n\n\nEraser\n\n\nThe Eraser can only remove strokes made with the Freehand tool.\n\n\nIn order to remove a stroke, the eraser tool needs to be activated\nand the stroke needs to be crossed with the mouse while the mouse is pressed.\n\n\nUsing the highlighting\n\n\nLimitations:\n\n\n\n\nThe highlight feature can \nnot\n highlight text over multiple PDF pages at once.\n\n\n\n\nOnce you have loaded the PDF, you can use its highlighting feature.\n\n\nThe highlighting feature is disabled by default. You have to enable it if you want to provide it to your users.\n\n\nEnable highlighting\n\n\npdf.highlighting.enable();\n\n\n\n\nThis will register several event listeners in order to enable the highlighting feature.\n\n\nTo actually highlight a text selection you have to use the \nonTextSelection\n Observable.\nIt'll will emit a \nTextSelection\n instance, whenever a text selection is performed by the user.\n\n\nIn contrast to the \nonTextSelection\n, the \nonTextUnselection\n Observable emits\nwhenever a text selection is cleared.\n\n\npdf.highlighting.onTextSelection\n    .subscribe(textSelection =\n {\n        // use the textSelection here\n    });\n\npdf.highlighting.onTextUnselection\n    .subscribe(() =\n {\n        // disable button\n    })\n\n\n\n\nThis can be useful, if you want to enable or disable a button to highlight or to clear the text selection.\n\n\nThe \nTextSelection\n instance provides a \nclearHighlight\n and a \nhighlight\n method.\n\n\n\n\nclearHighlight\n will remove any highlight of the selected text\n\n\nhighlight\n accepts a \nColor\n instance and highlights the selection with it\n\n\n\n\nLearn more about colors: \nUsing colors\n\n\n\n\nPDF Wrap only adds or remove event listeners for the text selection.\nIt does not actually disable the text select feature from a html page. If you want\nto disable it, you have to disable or enable it\nyourself through \nCSS\n.\n\n\n\n\nProvide your storage adapter\n\n\nIn order to use PDF Wrap, you must provide a storage adapter. A storage adapter\nis used to store and load PDF annotations.\n\n\nexport class MyStorageAdapter implements StorageAdapter {\n\n    register(): URI {\n        return URI.from(\nfile://\n);\n    }\n\n    start(uri: URI, events: PageEventCollection): void {\n        // listen on events\n    }\n\n    loadPage(uri: URI, pageNumber: number): Promise\nPageOverlay\n {\n        // load page data\n    }\n}\n\n\n\n\nYou have to implement three methods: \nregister\n, \nstart\n and \nloadPage\n.\n\n\n\n\nregister\n\n\nThe schema of the returned \nURI\n determines if your storage provider is used or not.\nWhich schema is used to load a PDF must be defined when the PDF is loaded.\n\n\nRead more about how to load a PDF: \nUsing the PDF Document Service\n\n\n\n\nstart\n\n\nWill be invoked when your storage provider is used. It'll provide the URI and a event collection,\nwhere you can listen to store the different annotations made on a PDF page.\n\n\nEach event is a hot \nObservable\n which emits specific objects.\n\n\n\n\nafterPolyLineRendered\n - Emits a \nDrawElement\n with the rendered \nPolyLine\n information.\n\n\nafterRectangleRendered\n - Emits a \nDrawElement\n with the rendered \nRectangle\n information.\n\n\nafterElementRemoved\n - Emits a \nDrawElement\n with the \nElement\n information which was removed.\n\n\n\n\nA \nDrawEvent\n contains a \nlayer\n and a \npageNumber\n property which you should store as well,\nbecause you have to provide highlights and drawings separated in your \nloadPage\n method.\nThe \nlayer\n property is either \nPageLayer.HIGHLIGHT\n or \nPageLayer.DRAWING\n.\n\n\n\n\nloadPage\n\n\nYou have to provide the page information to the given \npageNumber\n.\nHighlights and drawings are separated. In order to build the different elements\nyou should use the \nElementBuilderFactory\n class.\n\n\nasync loadPage(uri, URI, pageNumber: number): Promise\nPageOverlay\n {\n\n    // load your page information\n\n    return new PageOverlay(\n        pageNumber,\n        [...], // your highlights\n        [...] // your drawings\n    )\n}\n\n\n\n\nRead more about how to build elements: \nUsing the ElementBuilderFactory\n\n\nAdd your storage adapter to the \nStorageRegistry\n\n\nIn order to provide your storage adapter to PDF Wrap you have to add it\nto the \nStorageRegistry\n.\n\n\nThe \nStorageRegistry\n is a singleton where you can add as many storage adapters as you want.\n\n\n\nStorageRegistry.instance\n    .add(new MyStorageAdapter())\n    .add(new MyStorageadapter2());\n\n\n\n\n\nSkippable Storage Adapter\n\n\nYou can provide multiple storage adapters for the same URI schema. When the events from\nthe \nstart\n method are fired, every storage adapter will be used to store the data.\nBut when the PDF is loaded only one storage adapter can be used.\n\n\nUsually the first storage adapter will be used. But you can make your storage adapter skippable.\nThis can be useful, if you want to load the data, but in case it'll fail, delegate\nto the next storage adapter.\n\n\nTo make your storage adapter skippable extend the abstract class \nSkippableStorageAdapter\n.\n\n\nexport class MySkippableStorageAdapter extends SkippableStorgaeAdapter {\n\n    ... // other methods\n\n    loadPage(pageNumber: number): Promise\nPageOverlay\n {\n\n        try {\n            // load page data   \n        } catch (error) {\n            this.skip();\n        }        \n    }\n}\n\n\n\n\nThe \nskip\n method will abort the loading process of this adapter and continues with the next available adapter.\n\n\nEmpty Storage Adapter\n\n\nIf you don't want to provide a \nStorageAdapter\n you can register an \nEmptyStorageAdapter\n instance\n\n\nStorageRegistry.instance\n    .add(new EmptyStorageAdapter(URI.from(\nex://\n)));\n\n\n\n\n\n\nYou should only provide the \nEmptyStorageAdapter\n if you are not using the toolbox or highlighting at all.\n\n\n\n\nUsing the \nElementBuilderFactory\n\n\nIn order to create elements used in a \nStorageAdapter\n you should use the\n\nElementBuilderFactory\n.\n\n\n\nconst elementBuilder: ElementBuilderFactory = new ElementBuilderFactoryImpl();\n\nconst polyLine: PolyLine = elementBuilder.polyLine()\n    .id(\nsome-id\n)\n    .borderColor(colorFromHex(\n000000\n))\n    .coordinates([{x: 47.51, y: 201.45}, {x: 48.8, y: 202.02}])\n    .build();\n\n\n\n\n\nPDF Wrap Features\n\n\nSearch\n\n\nPDF Wrap provides a full text search over a PDF document. To access the \nDocumentSearch\n\nyou have to load a PDF.\n\n\nOnce you have loaded the PDF, you can access the \nSearchDocument\n\n\npdf.searchController;\n\n\n\n\nA \nDocumentSearch\n provides you with different methods:\n\n\n\n\nsearch\n - to start a search against a term\n\n\nprevious\n - to select the previous search result found by \nsearch\n\n\nnext\n - to select the next search result found by \nsearch\n\n\n\n\nThe \nsearch\n methods accepts two parameters, \nquery\n and \noptions\n\nwhere \nquery\n is self explained and \noptions\n are different flags for the search.\n\n\n\n\nsearchPhrase\n - if \ntrue\n the search term will be used as a phrase, otherwise as a term\n\n\nfuzzy\n - if \ntrue\n the search operation is performed case insensitive, otherwise case sensitive\n\n\nhighlightAll\n - if \ntrue\n highlights all search results, otherwise only the active selected\n\n\n\n\nExample Search\n\n\npdf.searchController.search(\nexample\n, {\n    highlightAll: true,\n    searchPhrase: false,\n    fuzzy: true});\n\n\n\n\nOutline\n\n\nYou can access the outline of a PDF once the PDF is loaded\n\n\npdf.getOutline().then(outline =\n {\n    // use the outline\n})\n\n\n\n\nThe \nOutline\n class provides two different forms of the outline.\nThe \nflatList\n and the \ntree\n structure, where the \nflatList\n means, that\neven nested outlines are at the top level.\nThe \ntree\n structure remains in the nested structure of the PDF outline.\n\n\nEach outline provides the \ntitle\n as well as the \npageNumber\n\n\n// use with flat list\npdf.getOutline().then(outline =\n {\n    outline.flatList.forEach(item =\n {\n        item.title;\n        item.pageNumber;\n    });\n});\n\n// use tree with children\npdf.getOutline().then(outline =\n {\n    outline.tree.forEach(item =\n {\n        item.title;\n        item.pageNumber;\n        item.children; // nested outlines\n    });\n});\n\n\n\n\nYou want to jump to the page where the outline points to? Check out \nPage Navigation\n\n\nPage Thumbnails\n\n\nYou can access thumbnails of the PDF pages once the PDF is loaded\n\n\n// get the thumbnail of page 1, 2 and 3 with a max size of 96px\npdf.getThumbnails(96, 1, 2, 3).subscribe(thumbnail =\n {\n    // use the thumbnail\n});\n\n\n\n\nThe \ngetThumbails\n method returns an \nObservable\n which emits every thumbnail after another.\nOnce the last thumbnail is loaded, the \nObservable\n completes.\n\n\n\n\nThe first parameter \nmaxSize\n defines the max size, a thumbnail can be.\n\n\nThe second parameter \npageNumbers\n is a vararg for the page number you want the thumbnail of.\n\n\n\n\nTip: If you want to get the thumbnail of all pages, use a while loop to get all page numbers of the document\n\n\nconst pages: Array\nnumber\n = []; while (pages.length \n pdf.pageCount) pages.push(pages.length + 1);\n\n\n\n\nPage Navigation\n\n\nYou can switch to a page by simply setting the \ncurrentPageNumber\n property of the \nPDFDocument\n\n\npdf.currentPageNumber = 5;\n\n// next page\npdf.currentPageNumber = pdf.currentPageNumber + 1;\n\n// previous page\npdf.currentPageNumber = pdf.currentPageNumber - 1;\n\n\n\n\nZoom\n\n\nYou can zoom in or zoom out by simply setting the \nscale\n property of the \nPDFDocument\n\n\npdf.scale = pdf.scale * 1.5; // will zoom in by 150%\npdf.scale = pdf.scale / 1.5; // will zoom out by 150%\n\n// or set a fix zoom value\npdf.scale = 1.5; // will zoom to 150%\n\n\n\n\nMiscellaneous\n\n\nUsing colors\n\n\nWhenever a color can be set in PDF Wrap, a \nColor\n instance is required.\n\n\nTo create a \nColor\n instances use one of the following functions.\n\n\nModule: \napi/draw/color\n\n\n\n\ncolorFrom\n\n\ncolorFromHex\n\n\ncolorFromRgba\n\n\n\n\n\n\nThere are predefined colors with the \nColors\n enumerator available.\n\n\n\n\nIf you're looking for valid values of these functions, please consider the typedoc \nAPI\n.", 
            "title": "Reference Documentation"
        }, 
        {
            "location": "/reference-documentation/#pdf-wrap-reference-documentation", 
            "text": "Authors  Nicolas M\u00e4rchy  Version 1.0.0  Copyright   2018 studer + raimann ag,  Creative Commons Attribution-ShareAlike 4.0 International License .", 
            "title": "PDF Wrap Reference Documentation"
        }, 
        {
            "location": "/reference-documentation/#getting-started", 
            "text": "As a note, PDF Wrap does not come with a bundled js file.  If you want a bundled version, you have to bundle it yourself (e.g. with  webpack ).", 
            "title": "Getting Started"
        }, 
        {
            "location": "/reference-documentation/#requirements", 
            "text": "Language level: ES5  Module System: commonjs  FileReader  support  Blob  support   Easy way to check the  FileReader  and  Blob  support  if (window.FileReader   window.Blob) {\n  // Great success! All the required File APIs are supported.\n} else {\n  alert('The required File APIs are not fully supported in this browser.');\n}", 
            "title": "Requirements"
        }, 
        {
            "location": "/reference-documentation/#installing", 
            "text": "PDF Wrap can be installed with npm or yarn.", 
            "title": "Installing"
        }, 
        {
            "location": "/reference-documentation/#yarn-install", 
            "text": "yarn add pdf-wrap", 
            "title": "Yarn Install"
        }, 
        {
            "location": "/reference-documentation/#npm-install", 
            "text": "npm i pdf-wrap", 
            "title": "NPM Install"
        }, 
        {
            "location": "/reference-documentation/#using-pdf-wrap", 
            "text": "This section goes into more detail about how you should use PDF Wrap.\nIt covers topics such as using the api, toolbox and how to provide your storage adapter.", 
            "title": "Using PDF Wrap"
        }, 
        {
            "location": "/reference-documentation/#setup-html", 
            "text": "In order to use PDF Wrap properly you have to setup a minimalistic html.", 
            "title": "Setup HTML"
        }, 
        {
            "location": "/reference-documentation/#styles", 
            "text": "In order to display the PDF properly you should include the following css file.   /assets/css/pdf-wrap.css", 
            "title": "Styles"
        }, 
        {
            "location": "/reference-documentation/#html-container", 
            "text": "You have to setup a html container in a specific way.  div class= pdf viewport \n\n         div class= pdf-container \n             div class= pdfViewer /div \n         /div  /div   Where the  div  with the class  pdf viewport  is your viewport. It is an absolute\npositioned  div  which will consume the entire area of its relative positioned parent.\nSo either wrap it with another  div  which is aligned like you want it,\nor override the  pdf viewport  css styles. Anyway, make sure  pdf viewport  has\na fix height, otherwise some features of PDF Wrap will not work.   A fix height can also be a percentage based height like  height: 100% . The viewport container\nshould not be larger than the window, otherwise you'll get doubled scrollbars.", 
            "title": "HTML container"
        }, 
        {
            "location": "/reference-documentation/#setup-pdfjs", 
            "text": "Because PDF Wrap uses  PDF.js  under the hood,\nyou have to provide the  pdf.worker.js  as well as some cMaps.  The  pdf.worker.js  and the cMaps are delivered in the  assets  directory of PDF Wrap.  Depending on how you build your project, either copy they to a directory of your choice or provide them\nsomehow as resources.  Either way you can set the assets src  setAssetsSrc( resources/lib/pdf-wrap/assets );  In this case, we assume, that the  assets  directory is copied into the resources/lib/pdf-wrap  directory of the built project.   Do NOT set the src url with starting  ./  or ending  / .   The default value of the assets src is  assets .", 
            "title": "Setup PDF.js"
        }, 
        {
            "location": "/reference-documentation/#setup-logger", 
            "text": "PDF Wrap has a default log configuration which logs everything from log level  Warn .  You can override the default config  LoggerFactory.configure({\n    logGroups: [\n        {\n            logger:  ch/studerraimann/pdfwrap ,\n            logLevel: LogLevel.Trace\n        }\n    ]\n});  Each log group object accepts the property  logger  and  logLevel .\nIt allows you to define different log levels for different directories, files or even classes.   logger  defines which directory, file class or function should be used  The string pattern scheme:  ch/studerraimann/pdfwrap/ directory name / file name : class or function name   ch/studerraimann/pdfwrap  - must be part of every logger  / directory name  - can be any directory structure inside the  src  directory of the PDF Wrap source code  / file name  - can be any file name (without extension) inside the specified directory name  : class or function name  - can be any class or function name inside the specified file name   Example   ch/studerrraimann/pdfwrap/pdfjs  - for everything inside this directory  ch/studerraimann/pdfwrap/pdfjs/highlight  - for everything inside this file  ch/studerraimann/pdfwrap/pdfjs/highlight:TextHighlighting  - for the class  TextHighlighting  of the file  highlight    logLevel  defines one of the log level to use on this group  If you are using Typescript you can use the enumerator  LogLevel .  If you are using Javascript you have to use the string value which represents the log level of the enumerator:   \"TRACE\"  \"DEBUG\"  \"INFO\"  \"WARN\"  \"ERROR\"  \"FATAL\"", 
            "title": "Setup Logger"
        }, 
        {
            "location": "/reference-documentation/#using-the-pdf-document-service", 
            "text": "The  PDFDocumentService  is your entry point to PDF Wrap. It provides a load method\nto load and display your PDF file.  Create an instance of a  PDFDocumentService  const documentService: PDFDocumentService = new PDFjsDocumentService();   Note that  PDFDocumentService  is the interface and  PDFjsDocumentService  is an implementation of it.   You must provide the PDF as a  Blob  documentService.loadWith({\n    container: document.getElementById( viewerContainer ),\n    pdf: pdfData,\n    layerStorage: URI.from( file://my-pdf )\n}).then(pdf =  {\n    // you'll get a PDFDocument instance\n});  Options:   container: your div with the  pdf-container  class.  pdf: a  Blob  representing your PDF file.      layerStorage: an  URI  to use for the storage adapter   Learn more about the  StorageAdapter", 
            "title": "Using the PDF Document Service"
        }, 
        {
            "location": "/reference-documentation/#layerstorage-example", 
            "text": "We assume   the  layerStorage  is \"mem://my-pdf\"  the registered storage adapter scheme is \"mem://\"   // load the document\ndocumentService.loadWith({\n    container: document.getElementById( viewerContainer ),\n    pdf:  assets/resources/my-pdf.pdf ,\n    layerStorage: URI.from( mem://my-pdf )\n}).then(pdf =  {\n    // you'll get a PDFDocument instance\n});\n\n// the storage adapter will get the full URI\nexport class MyStorageAdapter implements StorageAdapter {\n\n    register(): URI {\n        return URI.from( mem:// ); // we only provide the same scheme\n    }\n\n    start(uri: URI, events: PageEventCollection): void {\n        // uri is mem://my-pdf\n    }\n\n    loadPage(uri: URI, pageNumber: number): Promise PageOverlay  {\n        // uri is mem://my-pdf\n    }\n}  It is important to know, that for the  register  method, only the URI scheme is considered.\nWhere in the  start  and  loadPage  method, the full URI used by the  loadWith  method is provided.\nOtherwise, you would not be able to store different PDFs with the same Adapter.", 
            "title": "LayerStorage Example"
        }, 
        {
            "location": "/reference-documentation/#using-the-toolbox", 
            "text": "Once you have loaded the PDF, you can access its toolbox.  The toolbox contains the following tools:   Freehand - to draw with the mouse on a PDF page  Eraser - to remove drawings made with the Freehand tool   pdf.toolbox.freehand; // get the freehand tool instance\npdf.toolbox.eraser; // get the eraser tool instance  All tools can be activated, deactivated or toggled  pdf.toolbox.freehand.activate();\npdf.toolbox.freehand.deactivate();\npdf.toolbox.freehand.toggle();  All tools provide the current state through a property  const isFreehandActive: boolean = pdf.toolbox.freehand.isActive;  All tools provide an  Observable  which emits the new state in case of a state change  pdf.toolbox.freehand.stateChange\n    .subscribe(state =  {\n        if (state.isActive) {\n            ...\n        } else {\n            ...\n        }\n    })", 
            "title": "Using the toolbox"
        }, 
        {
            "location": "/reference-documentation/#freehand", 
            "text": "Limitations:   The Freehand tool can  not  draw over multiple PDF pages at once  The Freehand tool does  not  work with touchscreen   The Freehand tool as additional setters:   setColor  - accepts a  Color  instance and defines the color of the stroke  setStrokeWidth  - accepts a number in px and defines the width of the stroke   These setters can be chained  pdf.toolbox.freehand\n    .setColor(colorFromHex( #000 ))\n    .setStrokeWidth(2);  Learn more about colors:  Using colors", 
            "title": "Freehand"
        }, 
        {
            "location": "/reference-documentation/#eraser", 
            "text": "The Eraser can only remove strokes made with the Freehand tool.  In order to remove a stroke, the eraser tool needs to be activated\nand the stroke needs to be crossed with the mouse while the mouse is pressed.", 
            "title": "Eraser"
        }, 
        {
            "location": "/reference-documentation/#using-the-highlighting", 
            "text": "Limitations:   The highlight feature can  not  highlight text over multiple PDF pages at once.   Once you have loaded the PDF, you can use its highlighting feature.  The highlighting feature is disabled by default. You have to enable it if you want to provide it to your users.  Enable highlighting  pdf.highlighting.enable();  This will register several event listeners in order to enable the highlighting feature.  To actually highlight a text selection you have to use the  onTextSelection  Observable.\nIt'll will emit a  TextSelection  instance, whenever a text selection is performed by the user.  In contrast to the  onTextSelection , the  onTextUnselection  Observable emits\nwhenever a text selection is cleared.  pdf.highlighting.onTextSelection\n    .subscribe(textSelection =  {\n        // use the textSelection here\n    });\n\npdf.highlighting.onTextUnselection\n    .subscribe(() =  {\n        // disable button\n    })  This can be useful, if you want to enable or disable a button to highlight or to clear the text selection.  The  TextSelection  instance provides a  clearHighlight  and a  highlight  method.   clearHighlight  will remove any highlight of the selected text  highlight  accepts a  Color  instance and highlights the selection with it   Learn more about colors:  Using colors   PDF Wrap only adds or remove event listeners for the text selection.\nIt does not actually disable the text select feature from a html page. If you want\nto disable it, you have to disable or enable it\nyourself through  CSS .", 
            "title": "Using the highlighting"
        }, 
        {
            "location": "/reference-documentation/#provide-your-storage-adapter", 
            "text": "In order to use PDF Wrap, you must provide a storage adapter. A storage adapter\nis used to store and load PDF annotations.  export class MyStorageAdapter implements StorageAdapter {\n\n    register(): URI {\n        return URI.from( file:// );\n    }\n\n    start(uri: URI, events: PageEventCollection): void {\n        // listen on events\n    }\n\n    loadPage(uri: URI, pageNumber: number): Promise PageOverlay  {\n        // load page data\n    }\n}  You have to implement three methods:  register ,  start  and  loadPage .   register  The schema of the returned  URI  determines if your storage provider is used or not.\nWhich schema is used to load a PDF must be defined when the PDF is loaded.  Read more about how to load a PDF:  Using the PDF Document Service   start  Will be invoked when your storage provider is used. It'll provide the URI and a event collection,\nwhere you can listen to store the different annotations made on a PDF page.  Each event is a hot  Observable  which emits specific objects.   afterPolyLineRendered  - Emits a  DrawElement  with the rendered  PolyLine  information.  afterRectangleRendered  - Emits a  DrawElement  with the rendered  Rectangle  information.  afterElementRemoved  - Emits a  DrawElement  with the  Element  information which was removed.   A  DrawEvent  contains a  layer  and a  pageNumber  property which you should store as well,\nbecause you have to provide highlights and drawings separated in your  loadPage  method.\nThe  layer  property is either  PageLayer.HIGHLIGHT  or  PageLayer.DRAWING .   loadPage  You have to provide the page information to the given  pageNumber .\nHighlights and drawings are separated. In order to build the different elements\nyou should use the  ElementBuilderFactory  class.  async loadPage(uri, URI, pageNumber: number): Promise PageOverlay  {\n\n    // load your page information\n\n    return new PageOverlay(\n        pageNumber,\n        [...], // your highlights\n        [...] // your drawings\n    )\n}  Read more about how to build elements:  Using the ElementBuilderFactory", 
            "title": "Provide your storage adapter"
        }, 
        {
            "location": "/reference-documentation/#add-your-storage-adapter-to-the-storageregistry", 
            "text": "In order to provide your storage adapter to PDF Wrap you have to add it\nto the  StorageRegistry .  The  StorageRegistry  is a singleton where you can add as many storage adapters as you want.  \nStorageRegistry.instance\n    .add(new MyStorageAdapter())\n    .add(new MyStorageadapter2());", 
            "title": "Add your storage adapter to the StorageRegistry"
        }, 
        {
            "location": "/reference-documentation/#skippable-storage-adapter", 
            "text": "You can provide multiple storage adapters for the same URI schema. When the events from\nthe  start  method are fired, every storage adapter will be used to store the data.\nBut when the PDF is loaded only one storage adapter can be used.  Usually the first storage adapter will be used. But you can make your storage adapter skippable.\nThis can be useful, if you want to load the data, but in case it'll fail, delegate\nto the next storage adapter.  To make your storage adapter skippable extend the abstract class  SkippableStorageAdapter .  export class MySkippableStorageAdapter extends SkippableStorgaeAdapter {\n\n    ... // other methods\n\n    loadPage(pageNumber: number): Promise PageOverlay  {\n\n        try {\n            // load page data   \n        } catch (error) {\n            this.skip();\n        }        \n    }\n}  The  skip  method will abort the loading process of this adapter and continues with the next available adapter.", 
            "title": "Skippable Storage Adapter"
        }, 
        {
            "location": "/reference-documentation/#empty-storage-adapter", 
            "text": "If you don't want to provide a  StorageAdapter  you can register an  EmptyStorageAdapter  instance  StorageRegistry.instance\n    .add(new EmptyStorageAdapter(URI.from( ex:// )));   You should only provide the  EmptyStorageAdapter  if you are not using the toolbox or highlighting at all.", 
            "title": "Empty Storage Adapter"
        }, 
        {
            "location": "/reference-documentation/#using-the-elementbuilderfactory", 
            "text": "In order to create elements used in a  StorageAdapter  you should use the ElementBuilderFactory .  \nconst elementBuilder: ElementBuilderFactory = new ElementBuilderFactoryImpl();\n\nconst polyLine: PolyLine = elementBuilder.polyLine()\n    .id( some-id )\n    .borderColor(colorFromHex( 000000 ))\n    .coordinates([{x: 47.51, y: 201.45}, {x: 48.8, y: 202.02}])\n    .build();", 
            "title": "Using the ElementBuilderFactory"
        }, 
        {
            "location": "/reference-documentation/#pdf-wrap-features", 
            "text": "", 
            "title": "PDF Wrap Features"
        }, 
        {
            "location": "/reference-documentation/#search", 
            "text": "PDF Wrap provides a full text search over a PDF document. To access the  DocumentSearch \nyou have to load a PDF.  Once you have loaded the PDF, you can access the  SearchDocument  pdf.searchController;  A  DocumentSearch  provides you with different methods:   search  - to start a search against a term  previous  - to select the previous search result found by  search  next  - to select the next search result found by  search   The  search  methods accepts two parameters,  query  and  options \nwhere  query  is self explained and  options  are different flags for the search.   searchPhrase  - if  true  the search term will be used as a phrase, otherwise as a term  fuzzy  - if  true  the search operation is performed case insensitive, otherwise case sensitive  highlightAll  - if  true  highlights all search results, otherwise only the active selected", 
            "title": "Search"
        }, 
        {
            "location": "/reference-documentation/#example-search", 
            "text": "pdf.searchController.search( example , {\n    highlightAll: true,\n    searchPhrase: false,\n    fuzzy: true});", 
            "title": "Example Search"
        }, 
        {
            "location": "/reference-documentation/#outline", 
            "text": "You can access the outline of a PDF once the PDF is loaded  pdf.getOutline().then(outline =  {\n    // use the outline\n})  The  Outline  class provides two different forms of the outline.\nThe  flatList  and the  tree  structure, where the  flatList  means, that\neven nested outlines are at the top level.\nThe  tree  structure remains in the nested structure of the PDF outline.  Each outline provides the  title  as well as the  pageNumber  // use with flat list\npdf.getOutline().then(outline =  {\n    outline.flatList.forEach(item =  {\n        item.title;\n        item.pageNumber;\n    });\n});\n\n// use tree with children\npdf.getOutline().then(outline =  {\n    outline.tree.forEach(item =  {\n        item.title;\n        item.pageNumber;\n        item.children; // nested outlines\n    });\n});  You want to jump to the page where the outline points to? Check out  Page Navigation", 
            "title": "Outline"
        }, 
        {
            "location": "/reference-documentation/#page-thumbnails", 
            "text": "You can access thumbnails of the PDF pages once the PDF is loaded  // get the thumbnail of page 1, 2 and 3 with a max size of 96px\npdf.getThumbnails(96, 1, 2, 3).subscribe(thumbnail =  {\n    // use the thumbnail\n});  The  getThumbails  method returns an  Observable  which emits every thumbnail after another.\nOnce the last thumbnail is loaded, the  Observable  completes.   The first parameter  maxSize  defines the max size, a thumbnail can be.  The second parameter  pageNumbers  is a vararg for the page number you want the thumbnail of.   Tip: If you want to get the thumbnail of all pages, use a while loop to get all page numbers of the document  const pages: Array number  = []; while (pages.length   pdf.pageCount) pages.push(pages.length + 1);", 
            "title": "Page Thumbnails"
        }, 
        {
            "location": "/reference-documentation/#page-navigation", 
            "text": "You can switch to a page by simply setting the  currentPageNumber  property of the  PDFDocument  pdf.currentPageNumber = 5;\n\n// next page\npdf.currentPageNumber = pdf.currentPageNumber + 1;\n\n// previous page\npdf.currentPageNumber = pdf.currentPageNumber - 1;", 
            "title": "Page Navigation"
        }, 
        {
            "location": "/reference-documentation/#zoom", 
            "text": "You can zoom in or zoom out by simply setting the  scale  property of the  PDFDocument  pdf.scale = pdf.scale * 1.5; // will zoom in by 150%\npdf.scale = pdf.scale / 1.5; // will zoom out by 150%\n\n// or set a fix zoom value\npdf.scale = 1.5; // will zoom to 150%", 
            "title": "Zoom"
        }, 
        {
            "location": "/reference-documentation/#miscellaneous", 
            "text": "", 
            "title": "Miscellaneous"
        }, 
        {
            "location": "/reference-documentation/#using-colors", 
            "text": "Whenever a color can be set in PDF Wrap, a  Color  instance is required.  To create a  Color  instances use one of the following functions.  Module:  api/draw/color   colorFrom  colorFromHex  colorFromRgba    There are predefined colors with the  Colors  enumerator available.   If you're looking for valid values of these functions, please consider the typedoc  API .", 
            "title": "Using colors"
        }, 
        {
            "location": "/development-guide/", 
            "text": "Development Guide\n\n\nAuthors\n\n\nNicolas M\u00e4rchy\n\n\nVersion 1.0.0\n\n\nCopyright \n 2018 studer + raimann ag, \nCreative Commons Attribution-ShareAlike 4.0 International License\n.\n\n\n\n\nPrerequisites\n\n\n\n\nYarn - \nhttps://yarnpkg.com/lang/en\n\n\nNode.js - \nhttps://nodejs.org/en/\n\n\nMkDocs - \nhttps://www.mkdocs.org/\n\n\nghp-import - \nhttps://github.com/davisp/ghp-import\n\nYou need ghp-import on your PATH, otherwise you won't be able to publish the documentation.\n\n\n\n\nArchitecture\n\n\n\n\nThe \nAPI exposed to the user\n defines mainly interfaces a user can use. In contrast\nto the \npaint\n, which implements the possibility to draw, is only used internal of PDF Wrap.\nThe \npdfjs\n is the PDF.js implementation for the API.\n\n\nDisplaying PDF Pages\n\n\nThe PDF pages are displayed by PDF.js. But the highlight as well as the drawing are displayed by PDF Wrap.\n\n\nEvery page is displayed in a specific way.\n\n\n\n\nHIGHLIGHT LAYER\n\nThis layer contains any text highlighting with a 100% opacity. It is beneath the actual\nrendered PDF page, so it won't cover the text.\n\n\nPDF LAYER\n\nIs the actual PDF page rendered as svg by PDF.js.\n\n\nHIGHLIGHT LAYER TRANSPARENCY\n\nIs the same as the \nHIGHLIGHT Layer\n but with less opacity (about 40%). This layer\nis required to highlight text which is not on a white background. With only\nthe \nHIGHLIGHT LAYER\n, the highlight would not be visible at all, because of the\nnon-transparent background of the \nPDF LAYER\n. The transparency is required\nto not cover the \nPDF LAYER\n completely.\n\n\nDRAW LAYER\n\nThe layer contains all drawings made by a user.\n\n\nTEXT LAYER\n\nIs the invisible actual text of the PDF page. Is rendered by PDF.js and\nenables the text selection, because on the \nPDF LAYER\n is no text selection\navailable. Must be invisible, because its only purpose is the text selection.\nThe text itself may not have the correct font or exact position on the page.\n\n\nDirectory Structure\n\n\n\n\n1. /pdf-wrap - Root\n\n\n\n\nThe PDF Wrap root directory\n\n\nEvery single file and directory of PDF Wrap\n\n\nDirectly in this directory are configuration files like \npackage.json\n or \ntsconfg.json\n\n\n\n\n2. /build - Build Output\n\n\n\n\nContains all generated output files\n\n\n\n\nThe \n/build\n directory has a specific structure itself. Read more about \nbuild directory\n\n\n3. /docs - Documentation Source\n\n\n\n\nContains the documentation's source files\n\n\n\n\n4. /examples - PDF Wrap Examples\n\n\n\n\nContains examples of how to use PDF Wrap\n\n\nContains a Dev Viewer example mainly used for development\n\n\n\n\n5. /src - Source Code\n\n\n\n\nContains the source code of PDF Wrap\n\n\nThis also contains type definition files of libraries which don't have type definitions them-self\n\n\n\n\n6. /test - Unit Test\n\n\n\n\nContains unit test files\n\n\nThis also contains files with Mock object of for example interfaces\n\n\nUnit Test files must end with \n.spec.ts\n\n\nMock files must end with \n.mock.ts\n\n\nOnly files ending to \n.spec.ts\n or \n.mock.ts\n are picked up by Typescript\n\n\n\n\nbuild directory\n\n\nThe \nbuild\n directory is the output directory for any file generated through the \nTasks\n.\n\n\nIt is structured in a specific way.\n\n\n\n\n1. /javascript - Transpiled Code\n\n\n\n\nDirectly transpiled typescript code from \nsrc\n and \ntest\n directory\n\n\nNo uglifying\n\n\nNo dependencies\n\n\n\n\n2. /libs - Production Ready\n\n\n\n\nThis code is production ready\n\n\nUglified\n\n\nWith dependencies and additional resources like CSS files\n\n\n\n\n3. /distributions - Distribution Ready\n\n\n\n\nThis code is ready to be distributed\n\n\nUglified\n\n\nWith dependencies and additional resources like CSS files\n\n\nWith README file\n\n\nWith CHANGELOG file\n\n\nWith modified package.json file\n\n\n\n\n4. /docs - Built Documentation\n\n\n\n\nGenerated documentation like MkDocs or Typedoc\n\n\n\n\nTasks\n\n\nPDF Wrap uses \nGulp\n for its task management.\n\n\nThe \ngulpfile.js\n uses the \napp.properties.js\n file to get specific directories.\n\n\nThe \napp.properties.js\n file just exports an object, which resolves important directory paths absolute.\n\n\nbuild Tasks\n\n\nThe \nbuild\n tasks contain tasks all around building the project.\n\n\nclean\n\nCleans the build by removing the \nbuild\n directory.\n\n\nbuild\n\nTranspiles and lints typescript and runs the tests.\n\n\npackage\n\nPacks the project ready to use. Copies resources needed and uglifies the javascript code.\n\n\nrepackage\n\nSame as \npackage\n but executes \nclean\n before\n\n\nuglifyJS\n\nUglifies the javascript code\n\n\ndocs Tasks\n\n\nThe \ndocs\n tasks contain tasks about generating or publishing the documentation.\n\n\nmkdocs\n\nGenerates the MkDocs documentation and includes the typedoc.\n\n\ntypedoc\n\nGenerates the typedoc api documentation.\n\n\npublishDoc\n\nGenerates and publishes the MkDocs.\n\n\nother Tasks\n\n\nThe \nother\n tasks contain tasks which have more a general purpose, rather than something specific.\n\n\ncopyDependencies\n\nCopies the projects dependencies.\n\n\ncopyImages\n\nCopies the images used by PDF.js\n\n\ncopyCMaps\n\nCopies the cMaps of PDF.js\n\n\ncopyPDFJS\n\nCopies the PDF.js files needed.\n\n\ncopyCSS\n\nCopies and concat the CSS files needed.\n\n\ntransformPackageJSON\n\nDeclares every dependency used in package.json as \nbundledDependencies\n.\nThis is needed, because PDF Wrap does not come with a bundled js file.\nTherefore npm needs to know, that the dependencies are bundled.\nIn addition, \ndevDependecies\n are cleared, because they are not needed for production.\n\n\ntranspileTypescript\n\nTranspiles typescript to javascript and generates inline source maps.\n\n\nnpm Tasks\n\n\nThe \nnpm\n tasks contain tasks used for \nnpmjs\n.\n\n\npack\n\nRuns \nyarn pack\n for the \nbuild/distributions/npm\n directory.\n\n\npublish\n\nPublishes the project to npm.\n\n\nverification Tasks\n\n\nThe \nverification\n tasks contain tasks about testing.\n\n\ntest\n\nRunts the unit tests.\n\n\nlint\n\nLints the typescript code.\n\n\nLogging\n\n\nPDF Wrap uses \ntypescript-logging\n.\n\n\nThe configuration is abstracted to the user, to enable a unified log output.\n\n\nThe logger name\n\n\nThe logger name has a specific scheme in order to enable a unified and an exact as possible log output.\n\n\nnamespace\n/\nfile-path\n:\nclass-name\n\n\nnamespace\n\nThe namespace is always the same value: \nch/studerraimann/pdfwrap\n\n\nfile-path\n\nThe path of the file where you create the logger. The file name must be without the extension\nand the file path is relative to the \nsrc\n directory of PDF Wrap.\n\n\nclass-name\n\nThe class or function name where you create the logger.\n\n\nExample: Class\n\n\nAssuming the class is declared in the file \nsrc/services/my-service.ts\n.\n\n\nexport class MyService {\n\n    private readonly log: Logger = LoggerFactory.getLogger(\nch/studerraimann/pdfwrap/services/my-service:MyService\n);\n\n    constructor() {\n        this.log.info(() =\n \nCall constructor of MyService\n);\n    }\n\n\n\n\nExample: File\n\n\nAssuming the function is declared in the file \nsrc/services/my-service.ts\n.\n\n\nexport function doSomething() {\n\n    const log: Logger = LoggerFactory.getLogger(\nch/studerraimann/pdfwrap/services/my-service:doSomething\n);\n\n    log.info(() =\n \nCall doSomething\n);\n}\n\n\n\n\nYou should always use the lambda expression for a log message, because this way it will only be executed when its needed.\n\n\n\n\nPlease note, that the \nLogger\n type must be imported from \ntypescript-logging\n,\nbut the \nLoggerFactory\n class is from \nsrc/log-config.ts\n.\n\n\n\n\nWhy using it this way?\n\n\nPDF Wrap provides an API to configure the logging output way down to a function or class.\nThis way, the logger names are unified and as a result the configuration can be applied to every logger.\n\n\nRead the \nReference Documentation about logging\n to understand the concept better. \n\n\nMkDocs\n\n\nThe PDF Wrap documentation is built with \nMkDocs\n.\n\n\nThe documentation contains the following parts.\n\n\nHome\n\nThe index of the documentation. Contains a quick start and link to other parts of the documentation.\n\n\nGuides\n\nContains guides with a specific example of a specific part of PDF Wrap.\n\n\nFor example: How to implement a Storage Adapter\n\n\nAPI Documentation\n\nThe API documentation of PDF Wrap is part of the final output, but is not actually made by MkDocs.\n\n\nReference Documentation\n\nContains the full in-depth documentation about how to use PDF Wrap.\n\n\nDevelopment Guide\n\nContains guides about the source code and how to develop with PDF Wrap.\n\n\nHow to publish the documentation\n\n\nIn order to publish the documentation, you must have MkDocs installed\nand ghp-import must be on your PATH.\n\n\nThen simply run\n\n\nyarn gulp publishDoc\n\n\n\n\nThis will generate the documentation, updates the \ngh-pages\n branch\nand pushes it to Github.\n\n\nNPM\n\n\nPDF Wrap is published to \nnpm.js\n.\n\n\nHow to publish PDF Wrap\n\n\nIn order to publish this project to npm you have to log in with your npm account\n\n\nyarn login\n\n\n\n\nThen simply run\n\n\nyarn gulp publish\n\n\n\n\n\n\nIt is important to use this command and \nNOT \nyarn publish\n directly, because the gulp command will\nprepare PDF Wrap before publishing it.\n\n\n\n\nUnit Testing\n\n\nPDF Wrap uses \nMocha\n to run its tests. In addition, \nchaijs\n is used\nto assert test results. And for mocking classes, \nts-mockito\n is used.\n\n\nWhere to write tests\n\n\nAll unit tests are declared in the \ntest\n directory. This directory remains\nin the same structure like the \nsrc\n directory. Test files must end with \n.spec.ts\n and\nany files containing mock classes (if needed) must end with \n.mock.ts\n.\n\n\nThe file name of a unit test is the same where the class or function you wanna test, is declared.\n\n\nFor Example\n\n\nsrc/pdfjs/my-service.ts\n contains a function called \ndoBar\n you wanna test.\n\n\ntest/pdfjs/my-service.spec.ts\n must be the file name of the unit test.\n\n\nTest style\n\n\nMocha is a BDD (Behaviour Driven Development) testing Framework. Therefore we organize our test like this.\n\n\nTesting classes\n\n\nThe unit test structure of a class\n\n\n\ndescribe('the class you test', () =\n {\n\n    describe('the method you test', () =\n {\n\n        describe('the case of the method you test', () =\n {\n\n            it('should do what you expect', () =\n {\n                // AAA\n            }); \n        });\n    });\n});\n\n\n\n\nThis way you have a group per class, per method and per case of a method.\n\n\nThe \nit\n block should always start with \"should\".\n\nFor example, if you expect an error to be thrown: \nit(\"should throw an error indicating that ...\", () =\n { ... })\n\n\nAAA\n stands for \nArrange\n, \nAct\n and \nAssert\n, which means a test should be structured in that way.\n\n\n\n\nArrange everything for the test like mocks\n\n\nAct, which means that you invoke the method or function you wanna test\n\n\nAssert if everything worked like expected\n\n\n\n\nPro Tip:\n Mark where your \nArrange\n stops and your \nAct\n starts or where your \nAct\n stops and your \nAssert\n starts\nwith two blank lines between them.\n\n\n\n\nSometimes you just can not have this structure. Especially when you test for errors,\nbecause you have to invoke the tested method or function during the assert.\nAAA is more a guide line rather than an absolute rule.\n\n\n\n\nTesting functions\n\n\nWhen you test functions its pretty much the same structure, but you leave out the class describe.\n\n\ndescribe('the function you test', () =\n {\n\n    describe('the case you test', () =\n {\n\n        it('should do what you expect', () =\n {\n            // AAA\n        }); \n    });\n});\n\n\n\n\nMocha\n\n\nMocha has a cli options file which will be used: \ntest/mocha.opt\n.\n\n\nThis file contains command line arguments which should be used when running mocha.\n\n\nRead more about \nMocha Options\n\n\nts-mockito\n\n\nts-mockito is a mocking library for Typescript. A big advantages is, that\nyou don't lose the type definitions like you would for example with Sinon.js\n\n\nMocking interfaces\n\n\nBecause interfaces are a Typescript only thing and are not available during the runtime,\nts-mockito can not mock interfaces. So you have to create a mock class of the interface\nyou wanna mock your-self.\n\n\nBecause ts-mockito \ncan\n mock classes, you only have to create a mock class\nas an empty implementation, rather than a mock class for each case you wanna test.\n\n\nExample mocking interface\n\n\nThis is our interface\n\n\nexport interface MyService {\n\n    bar: number;\n\n    readonly foo: number;\n\n    doBar(): void;\n}\n\n\n\n\nYou create a mock class for it\n\n\nexport class MockMyService implements MyService {\n\n    get bar(): number {\n        throw new Error(\nNot implemented test stub\n);\n    }\n\n    set bar(_: number): void {\n        throw new Error(\nNot implemented test stub\n);\n    }\n\n    get foo(): number {\n        throw new Error(\nNot implemented test stub\n);\n    }\n\n    doBar(): void {\n        throw new Error(\nNot implemented test stub\n);\n    }\n}\n\n\n\n\nPlease note, that all implementations, including the properties, do throw an \nError\n\nindicating that this test stub is not implemented. This makes sure you do not\nhave a side effect when you forgot to manipulate a method or property.\n\n\nIn addition, parameters should be renamed to a \n_\n symbol, otherwise the Typescript compiler would report an error.\n\n\nRead more about \nUnused Parameters\n\n\n\n\nPlease note, that ts-mockito can mock an abstract class, but only manipulate non-abstract methods.\nTherefore, an interface can not be mocked by creating an abstract class of it\nand use the abstract class as the mock class.\n\n\n\n\nMiscellaneous\n\n\nCSS\n\n\nWhenever you have to declare CSS you must add it in the file \nsrc/assets/css/pdf-wrap.css\n.\n\n\nWhen the project is be built, this file will be concat together with the CSS file\nof PDF.js.\n\n\nCustom type def\n\n\nWhenever small type definitions are needed, they can be written in the \nsrc/declarations.ts\n file.\nBut it should not contain too much type defs of the same library.\n\n\nIf that's the case, create a directory in the \nsrc/declarations\n directory named after the library\nyou wanna use and write your type definitions there.\n\n\nUnused Parameters\n\n\nBecause our \ntsconfig.json\n enables the \nnoUnusedParameter\n flag, you would get an error\nwhenever you don't need a parameter. Instead of just not declare the parameter,\nyou should rename it with a \n_\n symbol. This way the Typescript compiler will not report an error\nand a developer does know, there is a parameter but it is not used.\n\n\nIn case you have multiple parameters you don't need, just add a additional \n_\n to the second unused parameter.\n\n\nExample\n\n\n\n// unused parameter\ndoBar(_: number): void { ... }\n\n// two unused parameters\ndoBar(_: nmuber, __: number): void { ... }\n\n// three unused parameters\ndoBar(_: number, __: number, ___: number): void { ... }\n\n// two unused with one used parameter\ndoBar(_: number, usedParameter: number, __: number): void {\n    console.log(usedParameter);\n}\n\n// and so on\n\n\n\n\nThis also can be applied to any case where a parameter is unused, whenever its a\nlambda expression, a method to implement or even a setter.\n\n\nType Doc\n\n\nThe type doc should be written in most cases. There are exceptions like getters / setters.\nIn addition to the the description in a type doc, there should be the following type doc annotations:\n\n\n\n\n@author your-name \nyour-email\n - e.g. \n@author Max Muster \nmm@gmail.com\n\n\n@since current-pdfwrap-version\n - e.g. \n@since 1.0.0\n\n\n@internal\n - is optional and should be declared whenever something is only used intern of PDF Wrap\n\n\n\n\nPDF.js\n\n\nPDF Wrap makes a high usage of \nPDF.js\n, which is written in Javascript.\n\n\nThe distribution of PDF.js is only the parsing functionality. But we also use their PDF Viewer.\nBecause of that, some parts of the PDF.js node module will be copied to the build output.\n\n\nType def\n\n\nDefinitelytyped\n contains a type def for PDF.js, but unfortunately it is not correct.\nTherefore we have our own type def of PDF.js, located in \nsrc/declarations/pdfjs\n.\n\n\nThis type def is not complete and contains only what we need right now.\n\n\nWhenever you need more of the API of PDF.js, you have to extend the type def.", 
            "title": "Development Guide"
        }, 
        {
            "location": "/development-guide/#development-guide", 
            "text": "Authors  Nicolas M\u00e4rchy  Version 1.0.0  Copyright   2018 studer + raimann ag,  Creative Commons Attribution-ShareAlike 4.0 International License .", 
            "title": "Development Guide"
        }, 
        {
            "location": "/development-guide/#prerequisites", 
            "text": "Yarn -  https://yarnpkg.com/lang/en  Node.js -  https://nodejs.org/en/  MkDocs -  https://www.mkdocs.org/  ghp-import -  https://github.com/davisp/ghp-import \nYou need ghp-import on your PATH, otherwise you won't be able to publish the documentation.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/development-guide/#architecture", 
            "text": "The  API exposed to the user  defines mainly interfaces a user can use. In contrast\nto the  paint , which implements the possibility to draw, is only used internal of PDF Wrap.\nThe  pdfjs  is the PDF.js implementation for the API.", 
            "title": "Architecture"
        }, 
        {
            "location": "/development-guide/#displaying-pdf-pages", 
            "text": "The PDF pages are displayed by PDF.js. But the highlight as well as the drawing are displayed by PDF Wrap.  Every page is displayed in a specific way.   HIGHLIGHT LAYER \nThis layer contains any text highlighting with a 100% opacity. It is beneath the actual\nrendered PDF page, so it won't cover the text.  PDF LAYER \nIs the actual PDF page rendered as svg by PDF.js.  HIGHLIGHT LAYER TRANSPARENCY \nIs the same as the  HIGHLIGHT Layer  but with less opacity (about 40%). This layer\nis required to highlight text which is not on a white background. With only\nthe  HIGHLIGHT LAYER , the highlight would not be visible at all, because of the\nnon-transparent background of the  PDF LAYER . The transparency is required\nto not cover the  PDF LAYER  completely.  DRAW LAYER \nThe layer contains all drawings made by a user.  TEXT LAYER \nIs the invisible actual text of the PDF page. Is rendered by PDF.js and\nenables the text selection, because on the  PDF LAYER  is no text selection\navailable. Must be invisible, because its only purpose is the text selection.\nThe text itself may not have the correct font or exact position on the page.", 
            "title": "Displaying PDF Pages"
        }, 
        {
            "location": "/development-guide/#directory-structure", 
            "text": "1. /pdf-wrap - Root   The PDF Wrap root directory  Every single file and directory of PDF Wrap  Directly in this directory are configuration files like  package.json  or  tsconfg.json   2. /build - Build Output   Contains all generated output files   The  /build  directory has a specific structure itself. Read more about  build directory  3. /docs - Documentation Source   Contains the documentation's source files   4. /examples - PDF Wrap Examples   Contains examples of how to use PDF Wrap  Contains a Dev Viewer example mainly used for development   5. /src - Source Code   Contains the source code of PDF Wrap  This also contains type definition files of libraries which don't have type definitions them-self   6. /test - Unit Test   Contains unit test files  This also contains files with Mock object of for example interfaces  Unit Test files must end with  .spec.ts  Mock files must end with  .mock.ts  Only files ending to  .spec.ts  or  .mock.ts  are picked up by Typescript", 
            "title": "Directory Structure"
        }, 
        {
            "location": "/development-guide/#build-directory", 
            "text": "The  build  directory is the output directory for any file generated through the  Tasks .  It is structured in a specific way.   1. /javascript - Transpiled Code   Directly transpiled typescript code from  src  and  test  directory  No uglifying  No dependencies   2. /libs - Production Ready   This code is production ready  Uglified  With dependencies and additional resources like CSS files   3. /distributions - Distribution Ready   This code is ready to be distributed  Uglified  With dependencies and additional resources like CSS files  With README file  With CHANGELOG file  With modified package.json file   4. /docs - Built Documentation   Generated documentation like MkDocs or Typedoc", 
            "title": "build directory"
        }, 
        {
            "location": "/development-guide/#tasks", 
            "text": "PDF Wrap uses  Gulp  for its task management.  The  gulpfile.js  uses the  app.properties.js  file to get specific directories.  The  app.properties.js  file just exports an object, which resolves important directory paths absolute.", 
            "title": "Tasks"
        }, 
        {
            "location": "/development-guide/#build-tasks", 
            "text": "The  build  tasks contain tasks all around building the project.  clean \nCleans the build by removing the  build  directory.  build \nTranspiles and lints typescript and runs the tests.  package \nPacks the project ready to use. Copies resources needed and uglifies the javascript code.  repackage \nSame as  package  but executes  clean  before  uglifyJS \nUglifies the javascript code", 
            "title": "build Tasks"
        }, 
        {
            "location": "/development-guide/#docs-tasks", 
            "text": "The  docs  tasks contain tasks about generating or publishing the documentation.  mkdocs \nGenerates the MkDocs documentation and includes the typedoc.  typedoc \nGenerates the typedoc api documentation.  publishDoc \nGenerates and publishes the MkDocs.", 
            "title": "docs Tasks"
        }, 
        {
            "location": "/development-guide/#other-tasks", 
            "text": "The  other  tasks contain tasks which have more a general purpose, rather than something specific.  copyDependencies \nCopies the projects dependencies.  copyImages \nCopies the images used by PDF.js  copyCMaps \nCopies the cMaps of PDF.js  copyPDFJS \nCopies the PDF.js files needed.  copyCSS \nCopies and concat the CSS files needed.  transformPackageJSON \nDeclares every dependency used in package.json as  bundledDependencies .\nThis is needed, because PDF Wrap does not come with a bundled js file.\nTherefore npm needs to know, that the dependencies are bundled.\nIn addition,  devDependecies  are cleared, because they are not needed for production.  transpileTypescript \nTranspiles typescript to javascript and generates inline source maps.", 
            "title": "other Tasks"
        }, 
        {
            "location": "/development-guide/#npm-tasks", 
            "text": "The  npm  tasks contain tasks used for  npmjs .  pack \nRuns  yarn pack  for the  build/distributions/npm  directory.  publish \nPublishes the project to npm.", 
            "title": "npm Tasks"
        }, 
        {
            "location": "/development-guide/#verification-tasks", 
            "text": "The  verification  tasks contain tasks about testing.  test \nRunts the unit tests.  lint \nLints the typescript code.", 
            "title": "verification Tasks"
        }, 
        {
            "location": "/development-guide/#logging", 
            "text": "PDF Wrap uses  typescript-logging .  The configuration is abstracted to the user, to enable a unified log output.", 
            "title": "Logging"
        }, 
        {
            "location": "/development-guide/#the-logger-name", 
            "text": "The logger name has a specific scheme in order to enable a unified and an exact as possible log output.  namespace / file-path : class-name  namespace \nThe namespace is always the same value:  ch/studerraimann/pdfwrap  file-path \nThe path of the file where you create the logger. The file name must be without the extension\nand the file path is relative to the  src  directory of PDF Wrap.  class-name \nThe class or function name where you create the logger.", 
            "title": "The logger name"
        }, 
        {
            "location": "/development-guide/#example-class", 
            "text": "Assuming the class is declared in the file  src/services/my-service.ts .  export class MyService {\n\n    private readonly log: Logger = LoggerFactory.getLogger( ch/studerraimann/pdfwrap/services/my-service:MyService );\n\n    constructor() {\n        this.log.info(() =   Call constructor of MyService );\n    }", 
            "title": "Example: Class"
        }, 
        {
            "location": "/development-guide/#example-file", 
            "text": "Assuming the function is declared in the file  src/services/my-service.ts .  export function doSomething() {\n\n    const log: Logger = LoggerFactory.getLogger( ch/studerraimann/pdfwrap/services/my-service:doSomething );\n\n    log.info(() =   Call doSomething );\n}  You should always use the lambda expression for a log message, because this way it will only be executed when its needed.   Please note, that the  Logger  type must be imported from  typescript-logging ,\nbut the  LoggerFactory  class is from  src/log-config.ts .", 
            "title": "Example: File"
        }, 
        {
            "location": "/development-guide/#why-using-it-this-way", 
            "text": "PDF Wrap provides an API to configure the logging output way down to a function or class.\nThis way, the logger names are unified and as a result the configuration can be applied to every logger.  Read the  Reference Documentation about logging  to understand the concept better.", 
            "title": "Why using it this way?"
        }, 
        {
            "location": "/development-guide/#mkdocs", 
            "text": "The PDF Wrap documentation is built with  MkDocs .  The documentation contains the following parts.  Home \nThe index of the documentation. Contains a quick start and link to other parts of the documentation.  Guides \nContains guides with a specific example of a specific part of PDF Wrap.  For example: How to implement a Storage Adapter  API Documentation \nThe API documentation of PDF Wrap is part of the final output, but is not actually made by MkDocs.  Reference Documentation \nContains the full in-depth documentation about how to use PDF Wrap.  Development Guide \nContains guides about the source code and how to develop with PDF Wrap.", 
            "title": "MkDocs"
        }, 
        {
            "location": "/development-guide/#how-to-publish-the-documentation", 
            "text": "In order to publish the documentation, you must have MkDocs installed\nand ghp-import must be on your PATH.  Then simply run  yarn gulp publishDoc  This will generate the documentation, updates the  gh-pages  branch\nand pushes it to Github.", 
            "title": "How to publish the documentation"
        }, 
        {
            "location": "/development-guide/#npm", 
            "text": "PDF Wrap is published to  npm.js .", 
            "title": "NPM"
        }, 
        {
            "location": "/development-guide/#how-to-publish-pdf-wrap", 
            "text": "In order to publish this project to npm you have to log in with your npm account  yarn login  Then simply run  yarn gulp publish   It is important to use this command and  NOT  yarn publish  directly, because the gulp command will\nprepare PDF Wrap before publishing it.", 
            "title": "How to publish PDF Wrap"
        }, 
        {
            "location": "/development-guide/#unit-testing", 
            "text": "PDF Wrap uses  Mocha  to run its tests. In addition,  chaijs  is used\nto assert test results. And for mocking classes,  ts-mockito  is used.", 
            "title": "Unit Testing"
        }, 
        {
            "location": "/development-guide/#where-to-write-tests", 
            "text": "All unit tests are declared in the  test  directory. This directory remains\nin the same structure like the  src  directory. Test files must end with  .spec.ts  and\nany files containing mock classes (if needed) must end with  .mock.ts .  The file name of a unit test is the same where the class or function you wanna test, is declared.  For Example  src/pdfjs/my-service.ts  contains a function called  doBar  you wanna test.  test/pdfjs/my-service.spec.ts  must be the file name of the unit test.", 
            "title": "Where to write tests"
        }, 
        {
            "location": "/development-guide/#test-style", 
            "text": "Mocha is a BDD (Behaviour Driven Development) testing Framework. Therefore we organize our test like this.", 
            "title": "Test style"
        }, 
        {
            "location": "/development-guide/#testing-classes", 
            "text": "The unit test structure of a class  \ndescribe('the class you test', () =  {\n\n    describe('the method you test', () =  {\n\n        describe('the case of the method you test', () =  {\n\n            it('should do what you expect', () =  {\n                // AAA\n            }); \n        });\n    });\n});  This way you have a group per class, per method and per case of a method.  The  it  block should always start with \"should\". \nFor example, if you expect an error to be thrown:  it(\"should throw an error indicating that ...\", () =  { ... })  AAA  stands for  Arrange ,  Act  and  Assert , which means a test should be structured in that way.   Arrange everything for the test like mocks  Act, which means that you invoke the method or function you wanna test  Assert if everything worked like expected   Pro Tip:  Mark where your  Arrange  stops and your  Act  starts or where your  Act  stops and your  Assert  starts\nwith two blank lines between them.   Sometimes you just can not have this structure. Especially when you test for errors,\nbecause you have to invoke the tested method or function during the assert.\nAAA is more a guide line rather than an absolute rule.", 
            "title": "Testing classes"
        }, 
        {
            "location": "/development-guide/#testing-functions", 
            "text": "When you test functions its pretty much the same structure, but you leave out the class describe.  describe('the function you test', () =  {\n\n    describe('the case you test', () =  {\n\n        it('should do what you expect', () =  {\n            // AAA\n        }); \n    });\n});", 
            "title": "Testing functions"
        }, 
        {
            "location": "/development-guide/#mocha", 
            "text": "Mocha has a cli options file which will be used:  test/mocha.opt .  This file contains command line arguments which should be used when running mocha.  Read more about  Mocha Options", 
            "title": "Mocha"
        }, 
        {
            "location": "/development-guide/#ts-mockito", 
            "text": "ts-mockito is a mocking library for Typescript. A big advantages is, that\nyou don't lose the type definitions like you would for example with Sinon.js", 
            "title": "ts-mockito"
        }, 
        {
            "location": "/development-guide/#mocking-interfaces", 
            "text": "Because interfaces are a Typescript only thing and are not available during the runtime,\nts-mockito can not mock interfaces. So you have to create a mock class of the interface\nyou wanna mock your-self.  Because ts-mockito  can  mock classes, you only have to create a mock class\nas an empty implementation, rather than a mock class for each case you wanna test.", 
            "title": "Mocking interfaces"
        }, 
        {
            "location": "/development-guide/#example-mocking-interface", 
            "text": "This is our interface  export interface MyService {\n\n    bar: number;\n\n    readonly foo: number;\n\n    doBar(): void;\n}  You create a mock class for it  export class MockMyService implements MyService {\n\n    get bar(): number {\n        throw new Error( Not implemented test stub );\n    }\n\n    set bar(_: number): void {\n        throw new Error( Not implemented test stub );\n    }\n\n    get foo(): number {\n        throw new Error( Not implemented test stub );\n    }\n\n    doBar(): void {\n        throw new Error( Not implemented test stub );\n    }\n}  Please note, that all implementations, including the properties, do throw an  Error \nindicating that this test stub is not implemented. This makes sure you do not\nhave a side effect when you forgot to manipulate a method or property.  In addition, parameters should be renamed to a  _  symbol, otherwise the Typescript compiler would report an error.  Read more about  Unused Parameters   Please note, that ts-mockito can mock an abstract class, but only manipulate non-abstract methods.\nTherefore, an interface can not be mocked by creating an abstract class of it\nand use the abstract class as the mock class.", 
            "title": "Example mocking interface"
        }, 
        {
            "location": "/development-guide/#miscellaneous", 
            "text": "", 
            "title": "Miscellaneous"
        }, 
        {
            "location": "/development-guide/#css", 
            "text": "Whenever you have to declare CSS you must add it in the file  src/assets/css/pdf-wrap.css .  When the project is be built, this file will be concat together with the CSS file\nof PDF.js.", 
            "title": "CSS"
        }, 
        {
            "location": "/development-guide/#custom-type-def", 
            "text": "Whenever small type definitions are needed, they can be written in the  src/declarations.ts  file.\nBut it should not contain too much type defs of the same library.  If that's the case, create a directory in the  src/declarations  directory named after the library\nyou wanna use and write your type definitions there.", 
            "title": "Custom type def"
        }, 
        {
            "location": "/development-guide/#unused-parameters", 
            "text": "Because our  tsconfig.json  enables the  noUnusedParameter  flag, you would get an error\nwhenever you don't need a parameter. Instead of just not declare the parameter,\nyou should rename it with a  _  symbol. This way the Typescript compiler will not report an error\nand a developer does know, there is a parameter but it is not used.  In case you have multiple parameters you don't need, just add a additional  _  to the second unused parameter.  Example  \n// unused parameter\ndoBar(_: number): void { ... }\n\n// two unused parameters\ndoBar(_: nmuber, __: number): void { ... }\n\n// three unused parameters\ndoBar(_: number, __: number, ___: number): void { ... }\n\n// two unused with one used parameter\ndoBar(_: number, usedParameter: number, __: number): void {\n    console.log(usedParameter);\n}\n\n// and so on  This also can be applied to any case where a parameter is unused, whenever its a\nlambda expression, a method to implement or even a setter.", 
            "title": "Unused Parameters"
        }, 
        {
            "location": "/development-guide/#type-doc", 
            "text": "The type doc should be written in most cases. There are exceptions like getters / setters.\nIn addition to the the description in a type doc, there should be the following type doc annotations:   @author your-name  your-email  - e.g.  @author Max Muster  mm@gmail.com  @since current-pdfwrap-version  - e.g.  @since 1.0.0  @internal  - is optional and should be declared whenever something is only used intern of PDF Wrap", 
            "title": "Type Doc"
        }, 
        {
            "location": "/development-guide/#pdfjs", 
            "text": "PDF Wrap makes a high usage of  PDF.js , which is written in Javascript.  The distribution of PDF.js is only the parsing functionality. But we also use their PDF Viewer.\nBecause of that, some parts of the PDF.js node module will be copied to the build output.", 
            "title": "PDF.js"
        }, 
        {
            "location": "/development-guide/#type-def", 
            "text": "Definitelytyped  contains a type def for PDF.js, but unfortunately it is not correct.\nTherefore we have our own type def of PDF.js, located in  src/declarations/pdfjs .  This type def is not complete and contains only what we need right now.  Whenever you need more of the API of PDF.js, you have to extend the type def.", 
            "title": "Type def"
        }
    ]
}